from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

from Crypto.Protocol.KDF import scrypt


def encrypt_file(shared_secret, file_path):
    iv = get_random_bytes(AES.block_size)
    cipher = AES.new(shared_secret, AES.MODE_CBC, iv)

    with open(file_path, "rb") as file:
        plaintext = file.read()

    padded_data = pad(plaintext, AES.block_size, style="pkcs7")
    ciphertext = cipher.encrypt(padded_data)

    return iv + ciphertext


def decrypt_file(shared_secret, ciphertext):
    iv = ciphertext[: AES.block_size]
    cipher = AES.new(shared_secret, AES.MODE_CBC, iv=iv)

    plaintext = cipher.decrypt(ciphertext[AES.block_size :])
    unpadded_data = unpad(plaintext, AES.block_size, style="pkcs7")

    return unpadded_data


def derive_shared_secret(sender_private_key, receiver_public_key):
    shared_secret = scrypt(
        sender_private_key.export_key(),
        receiver_public_key.export_key(),
        key_len=32,
        N=2**14,
        r=8,
        p=1,
    )

    return (
        shared_secret  # 32 bytes of a shared secret generated by scrypt (AES-256 key)
    )


def file_to_bytes(file_path: str) -> bytes:
    with open(file_path, "rb") as file:
        return file.read()
